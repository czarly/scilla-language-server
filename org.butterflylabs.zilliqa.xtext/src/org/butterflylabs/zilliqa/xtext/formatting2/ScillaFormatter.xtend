/*
 * generated by Xtext 2.16.0
 */
package org.butterflylabs.zilliqa.xtext.formatting2

import com.google.inject.Inject
import org.butterflylabs.zilliqa.xtext.scilla.Contract
import org.butterflylabs.zilliqa.xtext.scilla.ContractBody
import org.butterflylabs.zilliqa.xtext.scilla.Library
import org.butterflylabs.zilliqa.xtext.scilla.Scilla
import org.butterflylabs.zilliqa.xtext.services.ScillaGrammarAccess
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

class ScillaFormatter extends AbstractFormatter2 {
	
	@Inject extension ScillaGrammarAccess

	def dispatch void format(Scilla scilla, extension IFormattableDocument document) {
		for (_import : scilla.imports) {
			_import.format
		}
		
		scilla.imports.last.append[setNewLines(2)]
		
		scilla.library.format
		
		scilla.library.append[setNewLines(2)]
		
		scilla.contract.format
		
		scilla.contract.append[setNewLines(1)]
	}

	def dispatch void format(Library library, extension IFormattableDocument document) {
		for (variableDeclaration : library.functions) {
			variableDeclaration.format
		}
	}
	
	def dispatch void format(Contract contract, extension IFormattableDocument document) {
		contract.prepend[setNewLines(1)]
		contract.body.format
	}

	def dispatch void format(ContractBody body, extension IFormattableDocument document) {

		val lastTransition = body.transitions.last

		for (transition : body.transitions) {
			transition.prepend[setNewLines(1)]
			transition.format
			if (transition == lastTransition)
				transition.append[setNewLines(1)]
			else 
				transition.append[setNewLines(2)]
		}

	}
	
	// TODO: implement for Contract, VariableDeclaration, ContractBody, MutableField, Transition, TransitionBody, LocalBinding, TypeFunction, Function, TypeApplication, BuiltinApplication, MessageExpression, GeneralAssignment, MatchExpression, MatchExpressionSelector, Pair, Cons, Succ, Some, NewNat, NewOption, NewList, NewPair, EmptyMap, Application, VariableTerm, MutableFieldRef, StoreStatement, EventStatement, SendStatement, MatchStatement, MatchStatementSelector, ArrowType, MapType, DataType
}
